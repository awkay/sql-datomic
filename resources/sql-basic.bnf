sql_data_statement ::=
             delete_statement
     |       select_statement
     |       insert_statement
     |       update_statement

delete_statement ::=
    "DELETE" "FROM" table_name
    [ "WHERE" search_condition ]

_verbose_select_statement ::= query_expression

select_statement ::= <"SELECT"> select_list from_clause [ wee_where_clause ]

insert_statement ::=
    "INSERT" "INTO" table_name insert_columns_and_source

update_statement ::=
    "UPDATE" table_name "SET" set_clause_list
    [ "WHERE" search_condition ]

search_condition ::=
         boolean_term
     |   search_condition "OR" boolean_term

_verbose_table_name ::= identifier

table_name ::= #"[_A-Za-z]\w*"

query_expression ::= non_join_query_expression | joined_table

insert_columns_and_source ::=
     [ left_paren insert_column_list right_paren ] query_expression

set_clause_list ::= set_clause [ { comma set_clause } + ]

boolean_term ::=
         boolean_factor
     |   boolean_term "AND" boolean_factor

joined_table ::=
         qualified_join
     |   left_paren joined_table right_paren

non_join_query_expression ::= non_join_query_term

insert_column_list ::= column_name_list

left_paren ::= "("

right_paren ::= ")"

comma ::= ","

set_clause ::= object_column equals_operator update_source

boolean_factor ::= [ "NOT" ] boolean_test

local_table_name ::= qualified_identifier

period ::= "."

qualified_identifier ::= identifier

qualified_join ::=
             table_reference
             [ "INNER" ] "JOIN"
             table_reference [ join_specification ]

non_join_query_term ::=
             non_join_query_primary

query_term ::= non_join_query_term | joined_table

column_name_list ::= _verbose_column_name [ { comma _verbose_column_name }+ ]

equals_operator ::= "="

object_column ::= _verbose_column_name

update_source ::= value_expression | null_specification

boolean_test ::= boolean_primary [ "IS" [ "NOT" ] truth_value ]

identifier ::= actual_identifier

_verbose_table_reference ::=
         table_name [ correlation_specification ]
     |   derived_table correlation_specification
     |   joined_table

table_reference ::= table_name [ table_alias ]

table_alias ::= [ <"AS"> ] #"'[^']+'|[_A-Za-z]\w*"

join_specification ::= join_condition

corresponding_column_list ::= column_name_list

non_join_query_primary ::= simple_table

query_primary ::= non_join_query_primary | joined_table

_verbose_column_name ::= identifier

null_specification ::= "NULL"

value_expression ::=
         numeric_value_expression
     |   string_value_expression
     |   datetime_value_expression
     |   interval_value_expression

boolean_primary ::= predicate | left_paren search_condition right_paren

truth_value ::=
    "TRUE" | "FALSE" | "UNKNOWN"

actual_identifier ::= regular_identifier | delimited_identifier

unsigned_integer ::= #"\d+"

correlation_specification ::=
             [ "AS" ] correlation_name
             [ left_paren derived_column_list right_paren ]

derived_table ::= table_subquery

join_condition ::= "ON" search_condition

simple_table ::=
             query_specification
     |       table_value_constructor

datetime_value_expression ::=
             datetime_term
     |       interval_value_expression plus_sign datetime_term
     |       datetime_value_expression plus_sign interval_term
     |       datetime_value_expression minus_sign interval_term

interval_value_expression ::=
             interval_term
     |       interval_value_expression_1 plus_sign interval_term_1
     |       interval_value_expression_1 minus_sign interval_term_1
     |       left_paren datetime_value_expression minus_sign datetime_term right_paren interval_qualifier

numeric_value_expression ::=
         term
     |   numeric_value_expression plus_sign term
     |   numeric_value_expression minus_sign term

string_value_expression ::= character_value_expression

predicate ::=
         comparison_predicate
     |   between_predicate
     |   in_predicate
     |   like_predicate
     |   null_predicate
     |   quantified_comparison_predicate
     |   exists_predicate

delimited_identifier ::= #'"[^\"]+"'

regular_identifier ::= identifier_body

digit ::= #"\d+"

correlation_name ::= identifier

derived_column_list ::= column_name_list

table_subquery ::= subquery

query_specification ::=
             <"SELECT"> select_list
             table_expression

table_value_constructor ::= "VALUES" table_value_constructor_list

datetime_term ::= datetime_factor

interval_term ::=
             interval_factor
     |       interval_term_2 asterisk factor
     |       interval_term_2 solidus factor
     |       term asterisk interval_factor

minus_sign ::= "-"

plus_sign ::= "+"

interval_qualifier ::=
             start_field "TO" end_field
     |   single_datetime_field

interval_term_1 ::= interval_term

interval_value_expression_1 ::= interval_value_expression

term ::=
         factor
     |   term asterisk factor
     |   term solidus factor

character_value_expression ::= character_factor

between_predicate ::=
    row_value_constructor
     [ "NOT" ]
    "BETWEEN"
    row_value_constructor "AND" row_value_constructor

comparison_predicate ::= row_value_constructor comp_op row_value_constructor

exists_predicate ::= "EXISTS" table_subquery

in_predicate ::=
    row_value_constructor
     [ "NOT" ] "IN" in_predicate_value

like_predicate ::=
    match_value
    [ "NOT" ] "LIKE"
    pattern [ "ESCAPE" escape_character ]

null_predicate ::= row_value_constructor "IS" [ "NOT" ] "NULL"

quantified_comparison_predicate ::= row_value_constructor comp_op quantifier table_subquery

identifier_body ::= #"[_a-zA-Z]\w+"

subquery ::= left_paren query_expression right_paren

_verbose_select_list ::=
             asterisk
     |       select_sublist [ { comma select_sublist }+ ]

qualified_asterisk ::= #'("[^\"]+"|[_A-Za-z]\w*)' <"."> < asterisk >

select_list ::=
                ( column_name
                | qualified_asterisk
                | character_string_literal
                | exact_numeric_literal
                | approximate_numeric_literal )
                [ {
                  <",">
                  ( column_name
                  | qualified_asterisk
                  | character_string_literal
                  | exact_numeric_literal
                  | approximate_numeric_literal )
                  }+ ]

table_expression ::=
             from_clause
             [ where_clause ]

table_value_constructor_list ::= row_value_constructor [ { comma row_value_constructor }+ ]

datetime_factor ::= datetime_primary [ time_zone ]

asterisk ::= "*"

solidus ::= "/"

factor ::= [ sign ] numeric_primary

interval_factor ::= [ sign ] interval_primary

interval_term_2 ::= interval_term

end_field ::=
         non_second_datetime_field
     |   "SECOND" [ left_paren interval_fractional_seconds_precision right_paren ]

single_datetime_field ::=
         non_second_datetime_field [ left_paren interval_leading_field_precision right_paren ]
     |   "SECOND" [ left_paren interval_leading_field_precision [ comma left_paren interval_fractional_seconds_precision ] right_paren ]

start_field ::=
         non_second_datetime_field [ left_paren interval_leading_field_precision right_paren ]

character_factor ::= character_primary

row_value_constructor ::=
         row_value_constructor_element
     |   left_paren row_value_constructor_list right_paren
     |   row_subquery

comp_op ::=
         equals_operator
     |   not_equals_operator
     |   less_than_operator
     |   greater_than_operator
     |   less_than_or_equals_operator
     |   greater_than_or_equals_operator

in_predicate_value ::= table_subquery | left_paren in_value_list right_paren

escape_character ::= character_value_expression

match_value ::= character_value_expression

pattern ::= character_value_expression

row_value_constructor_1 ::= row_value_constructor

row_value_constructor_2 ::= row_value_constructor

quantifier ::= all | some

SQL_language_identifier ::= #"[_A-Za-z]\w*"

_verbose_select_sublist ::= derived_column | qualifier period asterisk

select_sublist ::= column_name
               | character_string_literal
               | exact_numeric_literal

column_name ::= #'("[^\"]+"|[_A-Za-z]\w*)'
                <"."> #'("[^\"]+"|[_A-Za-z]\w*)'

from_clause ::=
    <"FROM"> table_reference
    [ { <","> table_reference }+ ]

where_clause ::= "WHERE" search_condition

wee_where_clause ::= <"WHERE">
                 ( something_between_dates
                 | something_compare_something )
                 [ { <"AND">
                     ( something_between_dates
                     | something_compare_something )
                   }+ ]

something_between_dates ::= column_name <"BETWEEN">
                        something_datetime <"AND"> something_datetime

something_date_literal ::= <"date"> <"'"> #"\d{4}-\d{2}-\d{2}" <"'">

something_datetime_literal ::= <"datetime">
                           <"'">
                           #"\d{4}-\d{2}-\d{2}[ T]\d{2}:\d{2}:\d{2}"
                           <"'">

something_epochal_literal ::= <"time"> <"'"> #"\d+" <"'">

something_datetime ::= column_name
                   | something_date_literal
                   | something_datetime_literal
                   | something_epochal_literal

something_compare_something ::= column_name
                            #'(=|!=|<>|<|<=|>|>=)'
                            something_value

something_value ::= column_name
                | something_datetime
                | exact_numeric_literal
                | approximate_numeric_literal
                | character_string_literal

datetime_primary ::= value_expression_primary | datetime_value_function

time_zone ::= "AT" time_zone_specifier

numeric_primary ::= value_expression_primary

sign ::= plus_sign | minus_sign

interval_primary ::= value_expression_primary [ interval_qualifier ]

interval_fractional_seconds_precision ::= unsigned_integer

non_second_datetime_field ::=
                            "YEAR" | "MONTH" | "DAY" | "HOUR" | "MINUTE"

interval_leading_field_precision ::= unsigned_integer

character_primary ::= value_expression_primary

row_subquery ::= subquery

row_value_constructor_element ::=
         value_expression
     |   null_specification

row_value_constructor_list ::= row_value_constructor_element [ { comma row_value_constructor_element } + ]

greater_than_operator ::= ">"

greater_than_or_equals_operator ::= ">="

less_than_operator ::= "<"

less_than_or_equals_operator ::= "<="

not_equals_operator ::= "<>"

in_value_list ::= value_expression { comma value_expression } +

all ::= "ALL"

some ::= "SOME" | "ANY"

nondoublequote_character ::= #'[^\"]'

derived_column ::= value_expression

qualifier ::= _verbose_table_name | correlation_name

datetime_value_function ::=
             current_date_value_function
     |       current_time_value_function
     |       current_timestamp_value_function

value_expression_primary ::=
         unsigned_value_specification
     |   column_reference
     |   set_function_specification
     |   scalar_subquery
     |   left_paren value_expression right_paren
     |   cast_specification

time_zone_specifier ::=
      "LOCAL"
    | "TIME" "ZONE" interval_value_expression

current_date_value_function ::= "CURRENT_DATE"

current_time_value_function ::= "CURRENT_TIME" [ left_paren time_precision right_paren ]

current_timestamp_value_function ::= "CURRENT_TIMESTAMP" [ left_paren timestamp_precision right_paren ]

cast_specification ::= "CAST" left_paren cast_operand
                       "AS" cast_target right_paren

column_reference ::= [ qualifier <period> ] _verbose_column_name

scalar_subquery ::= subquery

set_function_specification ::=
         "COUNT" left_paren asterisk right_paren
     |   general_set_function

unsigned_value_specification ::= unsigned_literal | general_value_specification

time_precision ::= time_fractional_seconds_precision

timestamp_precision ::= time_fractional_seconds_precision

cast_operand ::= value_expression | "NULL"

cast_target ::= data_type

general_set_function ::=
             set_function_type left_paren value_expression right_paren

general_value_specification ::=
         parameter_specification
     |   dynamic_parameter_specification
     |   "USER"
     |   "CURRENT_USER"
     |   "SESSION_USER"
     |   "SYSTEM_USER"
     |   "VALUE"

unsigned_literal ::= unsigned_numeric_literal | general_literal

extract_field ::= datetime_field | time_zone_field

extract_source ::= datetime_value_expression | interval_value_expression

time_fractional_seconds_precision ::= unsigned_integer

data_type ::=
             character_string_type
     |       numeric_type
     |       datetime_type
     |       interval_type

set_function_type ::=
                    "AVG" | "MAX" | "MIN" | "SUM" | "COUNT"

dynamic_parameter_specification ::= question_mark

parameter_specification ::= parameter_name

general_literal ::=
             character_string_literal
     |       datetime_literal
     |       interval_literal

unsigned_numeric_literal ::=
             exact_numeric_literal
     |       approximate_numeric_literal

datetime_field ::= non_second_datetime_field | "SECOND"

time_zone_field ::= "TIMEZONE_HOUR" | "TIMEZONE_MINUTE"

start_position ::= numeric_value_expression

string_length ::= numeric_value_expression

character_string_type ::=
             "CHARACTER" [ left_paren length right_paren ]
     |       "CHAR" [ left_paren length right_paren ]
     |       "CHARACTER" "VARYING" [ left_paren length right_paren ]
     |       "CHAR" "VARYING" [ left_paren length right_paren ]
     |       "VARCHAR" [ left_paren length right_paren ]

datetime_type ::=
         "DATE"
     |   "TIME" [ left_paren time_precision right_paren ]
         [ "WITH" "TIME" "ZONE" ]
     |   "TIMESTAMP" [ left_paren timestamp_precision right_paren ]
         [ "WITH" "TIME" "ZONE" ]

interval_type ::= "INTERVAL" interval_qualifier

numeric_type ::=
             exact_numeric_type
     |       approximate_numeric_type

question_mark ::= "?"

parameter_name ::= colon identifier

character_string_literal ::= #"'[^']*'"

datetime_literal ::=
             date_literal
     |       time_literal
     |       timestamp_literal

interval_literal ::= "INTERVAL" [ sign ] interval_string interval_qualifier

approximate_numeric_literal ::=
             #"(\d+(\.(\d+)?)?|\.\d+)[eE](?:\+|-)?\d+"

exact_numeric_literal ::= #"(\d+(\.(\d+)?)?|\.\d+)"

result ::= result_expression | "NULL"

length ::= unsigned_integer

approximate_numeric_type ::=
             "FLOAT" [ left_paren precision right_paren ]
     |       "REAL"
     |       "DOUBLE" "PRECISION"

exact_numeric_type ::=
             "NUMERIC" [ left_paren precision [ comma scale ] right_paren ]
     |       "DECIMAL" [ left_paren precision [ comma scale ] right_paren ]
     |       "DEC" [ left_paren precision [ comma scale ] right_paren ]
     |       "INTEGER"
     |       "INT"
     |       "SMALLINT"

colon ::= ":"

<quote> ::= "'"

date_literal ::= "DATE" date_string

time_literal ::= "TIME" time_string

timestamp_literal ::= "TIMESTAMP" timestamp_string

interval_string ::= <quote> { year_month_literal | day_time_literal } <quote>

result_expression ::= value_expression

precision ::= unsigned_integer

scale ::= unsigned_integer

date_string ::= <quote> date_value <quote>

time_string ::= <quote> time_value [ time_zone_interval ] <quote>

timestamp_string ::= <quote> date_value time_value [ time_zone_interval ] <quote>

day_time_literal ::= day_time_interval | time_interval

year_month_literal ::=
             years_value
     |       [ years_value minus_sign ] months_value

<nonquote_character> ::= #"[^']"

quote_symbol ::= <quote> <quote>

signed_integer ::= #"(?:\+|-)?\d+"

date_value ::= years_value minus_sign months_value minus_sign days_value

time_value ::= hours_value colon minutes_value colon seconds_value

time_zone_interval ::= sign hours_value colon minutes_value

day_time_interval ::=
             days_value [ hours_value [ colon minutes_value [ colon seconds_value ] ] ]

time_interval ::=
             hours_value [ colon minutes_value [ colon seconds_value ] ]
     |       minutes_value [ colon seconds_value ]
     |       seconds_value

months_value ::= datetime_value

years_value ::= datetime_value

days_value ::= datetime_value

hours_value ::= datetime_value

minutes_value ::= datetime_value

seconds_value ::= #"\d+(\.(\d+)?)?"

datetime_value ::= unsigned_integer
